package org.catacombae.hfs.types.hfsplus;

import java.io.PrintStream;
import org.catacombae.csjc.PrintableStruct;
import org.catacombae.csjc.StaticStruct;
import org.catacombae.util.Util;

/** This class was generated by CStructToJavaClass. */
public class HFSPlusAttrExtents implements StaticStruct, PrintableStruct {
    /*
     * struct HFSPlusAttrExtents
     * size: 72 bytes
     * description:
     *
     * BP  Size  Type                 Identifier  Description
     * ------------------------------------------------------
     * 0   4     UInt32               recordType
     * 4   4     UInt32               reserved
     * 8   64    HFSPlusExtentRecord  extents
     */

    public static final int STRUCTSIZE = 72;

    private int recordType;
    private int reserved;
    private final HFSPlusExtentRecord extents;

    public HFSPlusAttrExtents(byte[] data, int offset) {
        recordType = Util.readIntBE(data, offset+0);
        reserved = Util.readIntBE(data, offset+4);
        extents = new HFSPlusExtentRecord(data, offset+8);
    }

    public static int length() { return STRUCTSIZE; }

    public int size() { return length(); }

    /**  */
    public final long getRecordType() { return Util.unsign(getRawRecordType()); }
    /**  */
    public final long getReserved() { return Util.unsign(getRawReserved()); }
    /**  */
    public final HFSPlusExtentRecord getExtents() { return extents; }

    /** <b>Note that the return value from this function should be interpreted as an unsigned integer, for instance using Util.unsign(...).</b> */
    public final int getRawRecordType() { return recordType; }
    /** <b>Note that the return value from this function should be interpreted as an unsigned integer, for instance using Util.unsign(...).</b> */
    public final int getRawReserved() { return reserved; }

    public void printFields(PrintStream ps, String prefix) {
        ps.println(prefix + " recordType: " + getRecordType());
        ps.println(prefix + " reserved: " + getReserved());
        ps.println(prefix + " extents: ");
        getExtents().print(ps, prefix + "  ");
    }

    public void print(PrintStream ps, String prefix) {
        ps.println(prefix + "HFSPlusAttrExtents:");
        printFields(ps, prefix);
    }

    public byte[] getBytes() {
        byte[] result = new byte[length()];
        int offset = 0;

        Util.arrayPutBE(result, offset, recordType); offset += 4;
        Util.arrayPutBE(result, offset, reserved); offset += 4;
        {
            byte[] tempData = this.extents.getBytes();
            System.arraycopy(tempData, 0, result, offset, tempData.length); offset += tempData.length;
        }

        return result;
    }
}
