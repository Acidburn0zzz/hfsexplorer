package org.catacombae.hfs.types.hfsplus;

import java.io.PrintStream;
import org.catacombae.csjc.PrintableStruct;
import org.catacombae.csjc.StaticStruct;
import org.catacombae.util.Util;

/** This class was generated by CStructToJavaClass. */
public class BlockListHeader implements StaticStruct, PrintableStruct {
    /*
     * struct BlockListHeader
     * size: 32 bytes
     * description:
     *
     * BP  Size  Type          Identifier  Description
     * -----------------------------------------------
     * 0   2     UInt16        maxBlocks
     * 2   2     UInt16        numBlocks
     * 4   4     UInt32        bytesUsed
     * 8   4     UInt32        checksum
     * 12  4     UInt32        pad
     * 16  16*1  BlockInfo[1]  binfo
     */

    public static final int STRUCTSIZE = 32;

    private short maxBlocks;
    private short numBlocks;
    private int bytesUsed;
    private int checksum;
    private int pad;
    private final BlockInfo binfo;

    public BlockListHeader(byte[] data, int offset) {
        maxBlocks = Util.readShortBE(data, offset+0);
        numBlocks = Util.readShortBE(data, offset+2);
        bytesUsed = Util.readIntBE(data, offset+4);
        checksum = Util.readIntBE(data, offset+8);
        pad = Util.readIntBE(data, offset+12);
        binfo = new BlockInfo(data, offset+16);
    }

    public static int length() { return STRUCTSIZE; }

    public int size() { return length(); }

    /**  */
    public final int getMaxBlocks() { return Util.unsign(getRawMaxBlocks()); }
    /**  */
    public final int getNumBlocks() { return Util.unsign(getRawNumBlocks()); }
    /**  */
    public final long getBytesUsed() { return Util.unsign(getRawBytesUsed()); }
    /**  */
    public final long getChecksum() { return Util.unsign(getRawChecksum()); }
    /**  */
    public final long getPad() { return Util.unsign(getRawPad()); }
    /**  */
    public final BlockInfo getBinfo() { return binfo; }

    /** <b>Note that the return value from this function should be interpreted as an unsigned integer, for instance using Util.unsign(...).</b> */
    public final short getRawMaxBlocks() { return maxBlocks; }
    /** <b>Note that the return value from this function should be interpreted as an unsigned integer, for instance using Util.unsign(...).</b> */
    public final short getRawNumBlocks() { return numBlocks; }
    /** <b>Note that the return value from this function should be interpreted as an unsigned integer, for instance using Util.unsign(...).</b> */
    public final int getRawBytesUsed() { return bytesUsed; }
    /** <b>Note that the return value from this function should be interpreted as an unsigned integer, for instance using Util.unsign(...).</b> */
    public final int getRawChecksum() { return checksum; }
    /** <b>Note that the return value from this function should be interpreted as an unsigned integer, for instance using Util.unsign(...).</b> */
    public final int getRawPad() { return pad; }

    public void printFields(PrintStream ps, String prefix) {
        ps.println(prefix + " maxBlocks: " + getMaxBlocks());
        ps.println(prefix + " numBlocks: " + getNumBlocks());
        ps.println(prefix + " bytesUsed: " + getBytesUsed());
        ps.println(prefix + " checksum: " + getChecksum());
        ps.println(prefix + " pad: " + getPad());
        ps.println(prefix + " binfo: ");
        getBinfo().print(ps, prefix+"  ");
    }

    public void print(PrintStream ps, String prefix) {
        ps.println(prefix + "BlockListHeader:");
        printFields(ps, prefix);
    }

    public byte[] getBytes() {
        byte[] result = new byte[length()];
        int offset = 0;
        Util.arrayPutBE(result, offset, maxBlocks); offset += 2;
        Util.arrayPutBE(result, offset, numBlocks); offset += 2;
        Util.arrayPutBE(result, offset, bytesUsed); offset += 4;
        Util.arrayPutBE(result, offset, checksum); offset += 4;
        Util.arrayPutBE(result, offset, pad); offset += 4;
        {
            byte[] tempData = this.binfo.getBytes();
            System.arraycopy(tempData, 0, result, offset, tempData.length); offset += tempData.length;
        }
        return result;
    }
}
