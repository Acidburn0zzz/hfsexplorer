package org.catacombae.hfs.types.hfsplus;

import java.io.PrintStream;
import java.math.BigInteger;
import org.catacombae.csjc.PrintableStruct;
import org.catacombae.csjc.StaticStruct;
import org.catacombae.util.Util;

/** This class was generated by CStructToJavaClass. */
public class JournalHeader implements StaticStruct, PrintableStruct {
    /*
     * struct JournalHeader
     * size: 44 bytes
     * description: 
     * 
     * BP  Size  Type    Identifier  Description
     * -----------------------------------------
     * 0   4     UInt32  magic       
     * 4   4     UInt32  endian      
     * 8   8     UInt64  start       
     * 16  8     UInt64  end         
     * 24  8     UInt64  size        
     * 32  4     UInt32  blhdrSize   
     * 36  4     UInt32  checksum    
     * 40  4     UInt32  jhdrSize    
     */

    public static final int STRUCTSIZE = 44;

    private int magic;
    private int endian;
    private long start;
    private long end;
    private long size;
    private int blhdrSize;
    private int checksum;
    private int jhdrSize;

    public JournalHeader(byte[] data, int offset) {
        magic = Util.readIntBE(data, offset+0);
        endian = Util.readIntBE(data, offset+4);
        start = Util.readLongBE(data, offset+8);
        end = Util.readLongBE(data, offset+16);
        size = Util.readLongBE(data, offset+24);
        blhdrSize = Util.readIntBE(data, offset+32);
        checksum = Util.readIntBE(data, offset+36);
        jhdrSize = Util.readIntBE(data, offset+40);
    }

    public static int length() { return STRUCTSIZE; }

    public int size() { return length(); }

    /**  */
    public final long getMagic() { return Util.unsign(getRawMagic()); }
    /**  */
    public final long getEndian() { return Util.unsign(getRawEndian()); }
    /**  */
    public final BigInteger getStart() { return Util.unsign(getRawStart()); }
    /**  */
    public final BigInteger getEnd() { return Util.unsign(getRawEnd()); }
    /**  */
    public final BigInteger getSize() { return Util.unsign(getRawSize()); }
    /**  */
    public final long getBlhdrSize() { return Util.unsign(getRawBlhdrSize()); }
    /**  */
    public final long getChecksum() { return Util.unsign(getRawChecksum()); }
    /**  */
    public final long getJhdrSize() { return Util.unsign(getRawJhdrSize()); }

    /** <b>Note that the return value from this function should be interpreted as an unsigned integer, for instance using Util.unsign(...).</b> */
    public final int getRawMagic() { return magic; }
    /** <b>Note that the return value from this function should be interpreted as an unsigned integer, for instance using Util.unsign(...).</b> */
    public final int getRawEndian() { return endian; }
    /** <b>Note that the return value from this function should be interpreted as an unsigned integer, for instance using Util.unsign(...).</b> */
    public final long getRawStart() { return start; }
    /** <b>Note that the return value from this function should be interpreted as an unsigned integer, for instance using Util.unsign(...).</b> */
    public final long getRawEnd() { return end; }
    /** <b>Note that the return value from this function should be interpreted as an unsigned integer, for instance using Util.unsign(...).</b> */
    public final long getRawSize() { return size; }
    /** <b>Note that the return value from this function should be interpreted as an unsigned integer, for instance using Util.unsign(...).</b> */
    public final int getRawBlhdrSize() { return blhdrSize; }
    /** <b>Note that the return value from this function should be interpreted as an unsigned integer, for instance using Util.unsign(...).</b> */
    public final int getRawChecksum() { return checksum; }
    /** <b>Note that the return value from this function should be interpreted as an unsigned integer, for instance using Util.unsign(...).</b> */
    public final int getRawJhdrSize() { return jhdrSize; }

    public void printFields(PrintStream ps, String prefix) {
        ps.println(prefix + " magic: " + getMagic());
        ps.println(prefix + " endian: " + getEndian());
        ps.println(prefix + " start: " + getStart());
        ps.println(prefix + " end: " + getEnd());
        ps.println(prefix + " size: " + getSize());
        ps.println(prefix + " blhdrSize: " + getBlhdrSize());
        ps.println(prefix + " checksum: " + getChecksum());
        ps.println(prefix + " jhdrSize: " + getJhdrSize());
    }

    public void print(PrintStream ps, String prefix) {
        ps.println(prefix + "JournalHeader:");
        printFields(ps, prefix);
    }

    public byte[] getBytes() {
        byte[] result = new byte[length()];
        int offset = 0;
        Util.arrayPutBE(result, offset, magic); offset += 4;
        Util.arrayPutBE(result, offset, endian); offset += 4;
        Util.arrayPutBE(result, offset, start); offset += 8;
        Util.arrayPutBE(result, offset, end); offset += 8;
        Util.arrayPutBE(result, offset, size); offset += 8;
        Util.arrayPutBE(result, offset, blhdrSize); offset += 4;
        Util.arrayPutBE(result, offset, checksum); offset += 4;
        Util.arrayPutBE(result, offset, jhdrSize); offset += 4;
        return result;
    }
}
