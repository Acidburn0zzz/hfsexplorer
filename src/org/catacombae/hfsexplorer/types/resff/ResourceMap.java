package org.catacombae.hfsexplorer.types.resff;

import java.io.PrintStream;
import org.catacombae.csjc.DynamicStruct;
import org.catacombae.csjc.PrintableStruct;
import org.catacombae.hfsexplorer.Util;

/** This class was generated by CStructToJavaClass. */
public class ResourceMap implements DynamicStruct, PrintableStruct {
    /*
     * struct ResourceMap
     * size: minimum 30 or 38 bytes
     * description: 
     * 
     * BP  Size  Type                       Identifier              Description                                           
     * -------------------------------------------------------------------------------------------------------------------
     * 0   1*16  UInt8[16]                  reserved1               // Reserved for copy of resource header.              
     * 16  4     UInt32                     reserved2               // Reserved for handle to next resource map.          
     * 20  2     UInt16                     reserved3               // Reserved for file reference number.                
     * 22  2     UInt16                     resourceForkAttributes  // Resource fork attributes                           
     * 24  2     UInt16                     typeListOffset          // Offset from beginning of map to resource type list.
     * 26  2     UInt16                     nameListOffset          // Offset from beginning of map to resource name list.
     * 28  2     UInt16                     typeCount               // Number of types in the map minus 1.                
     * 30  8*?   ResourceType[typeCount+1]  resourceTypeList        // Resource type list.                                
     */
    
    public static final int STRUCTSIZE = 46;
    
    private final byte[] reserved1 = new byte[1*16];
    private final byte[] reserved2 = new byte[4];
    private final byte[] reserved3 = new byte[2];
    private final byte[] resourceForkAttributes = new byte[2];
    private final byte[] typeListOffset = new byte[2];
    private final byte[] nameListOffset = new byte[2];
    private final byte[] typeCount = new byte[2];
    private final ResourceType[] resourceTypeList;
    
    public ResourceMap(byte[] data, int offset) {
	System.arraycopy(data, offset+0, reserved1, 0, 1*16);
	System.arraycopy(data, offset+16, reserved2, 0, 4);
	System.arraycopy(data, offset+20, reserved3, 0, 2);
	System.arraycopy(data, offset+22, resourceForkAttributes, 0, 2);
	System.arraycopy(data, offset+24, typeListOffset, 0, 2);
	System.arraycopy(data, offset+26, nameListOffset, 0, 2);
	System.arraycopy(data, offset+28, typeCount, 0, 2);
	resourceTypeList = new ResourceType[Util.unsign(getTypeCount())];
        for(int i = 0; i < resourceTypeList.length; ++i)
            resourceTypeList[i] = new ResourceType(data, offset+30+i*ResourceType.length());
    }
    
    public static int length() { return STRUCTSIZE; }

    public int maxSize() {
        /* Non-variable fields: 30 bytes
         * Number of ResourceTypes can be from 1 (typeCount=0) to
         * 65536 (typeCount=65535) */
        return 30 + ResourceType.length()*(65535+1);
    }

    public int occupiedSize() {
        return 30 + resourceTypeList.length*ResourceType.length();
    }
    
    /** // Reserved for copy of resource header. */
    public byte[] getReserved1() { return Util.readByteArrayBE(reserved1); }
    /** // Reserved for handle to next resource map. */
    public int getReserved2() { return Util.readIntBE(reserved2); }
    /** // Reserved for file reference number. */
    public short getReserved3() { return Util.readShortBE(reserved3); }
    /** // Resource fork attributes */
    public short getResourceForkAttributes() { return Util.readShortBE(resourceForkAttributes); }
    /** // Offset from beginning of map to resource type list. */
    public short getTypeListOffset() { return Util.readShortBE(typeListOffset); }
    /** // Offset from beginning of map to resource name list. */
    public short getNameListOffset() { return Util.readShortBE(nameListOffset); }
    /** // Number of types in the map minus 1. */
    public short getTypeCount() { return Util.readShortBE(typeCount); }
    /** // Resource type list. */
    public ResourceType[] getResourceTypeList() { return Util.arrayCopy(resourceTypeList, new ResourceType[resourceTypeList.length]); }
    
    public void printFields(PrintStream ps, String prefix) {
	ps.println(prefix + " reserved1: " + getReserved1());
	ps.println(prefix + " reserved2: " + getReserved2());
	ps.println(prefix + " reserved3: " + getReserved3());
	ps.println(prefix + " resourceForkAttributes: " + getResourceForkAttributes());
	ps.println(prefix + " typeListOffset: " + getTypeListOffset());
	ps.println(prefix + " nameListOffset: " + getNameListOffset());
	ps.println(prefix + " typeCount: " + getTypeCount());
	ps.println(prefix + " resourceTypeList: ");
        for(int i = 0; i < resourceTypeList.length; ++i) {
            ps.println(prefix + "  [" + i + "]:");
            resourceTypeList[i].print(ps, prefix+"   ");
        }
    }
    
    public void print(PrintStream ps, String prefix) {
	ps.println(prefix + "ResourceMap:");
	printFields(ps, prefix);
    }
    
    public byte[] getBytes() {
	byte[] result = new byte[length()];
	int offset = 0;
	System.arraycopy(this.reserved1, 0, result, offset, this.reserved1.length); offset += this.reserved1.length;
	System.arraycopy(this.reserved2, 0, result, offset, this.reserved2.length); offset += this.reserved2.length;
	System.arraycopy(this.reserved3, 0, result, offset, this.reserved3.length); offset += this.reserved3.length;
	System.arraycopy(this.resourceForkAttributes, 0, result, offset, this.resourceForkAttributes.length); offset += this.resourceForkAttributes.length;
	System.arraycopy(this.typeListOffset, 0, result, offset, this.typeListOffset.length); offset += this.typeListOffset.length;
	System.arraycopy(this.nameListOffset, 0, result, offset, this.nameListOffset.length); offset += this.nameListOffset.length;
	System.arraycopy(this.typeCount, 0, result, offset, this.typeCount.length); offset += this.typeCount.length;
	for(int i = 0; i < resourceTypeList.length; ++i) {
	    byte[] tempData = this.resourceTypeList[i].getBytes();
	    System.arraycopy(tempData, 0, result, offset, tempData.length); offset += tempData.length;
	}
	return result;
    }
}
