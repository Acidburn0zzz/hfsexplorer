package org.catacombae.hfsexplorer.types.resff;

import java.io.PrintStream;
import org.catacombae.csjc.DynamicStruct;
import org.catacombae.csjc.PrintableStruct;
import org.catacombae.hfsexplorer.Util;

/** This class was generated by CStructToJavaClass. */
public class ResourceName implements DynamicStruct, PrintableStruct {
    /*
     * struct ResourceName
     * size: minimum 1 bytes
     * description: 
     * 
     * BP  Size  Type              Identifier  Description
     * ---------------------------------------------------
     * 0   1     UInt8             nameLength             
     * 1   1*?   Char[nameLength]  name                   
     */
    
    private final byte nameLength;
    private final byte[] name;
    
    public ResourceName(byte[] data, int offset) {
	nameLength = data[offset+0];
        name = new byte[getNameLength()];
	System.arraycopy(data, offset+1, name, 0, name.length);
    }
    
    /**  */
    public short getNameLength() { return Util.unsign(nameLength); }
    /**  */
    public byte[] getName() { return Util.readByteArrayBE(name); }
    
    public void printFields(PrintStream ps, String prefix) {
	ps.println(prefix + " nameLength: " + getNameLength());
	ps.println(prefix + " name: " + getName());
    }
    
    public void print(PrintStream ps, String prefix) {
	ps.println(prefix + "ResourceName:");
	printFields(ps, prefix);
    }
    
    public byte[] getBytes() {
	byte[] result = new byte[occupiedSize()];
	int offset = 0;
	result[offset] = this.nameLength; offset += 1;
	System.arraycopy(this.name, 0, result, offset, this.name.length); offset += this.name.length;
	return result;
    }

    public int maxSize() {
        return 255;
    }

    public int occupiedSize() {
        return 1+name.length;
    }
}
