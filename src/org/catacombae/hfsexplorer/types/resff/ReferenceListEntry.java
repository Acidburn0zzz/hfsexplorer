package org.catacombae.hfsexplorer.types.resff;

import java.io.PrintStream;
import org.catacombae.csjc.PrintableStruct;
import org.catacombae.csjc.StaticStruct;
import org.catacombae.hfsexplorer.Util;

/** This class was generated by CStructToJavaClass. */
public class ReferenceListEntry implements StaticStruct, PrintableStruct {
    /*
     * struct ReferenceListEntry
     * size: 12 bytes
     * description: 
     * 
     * BP  Size  Type      Identifier          Description                                                         
     * ------------------------------------------------------------------------------------------------------------
     * 0   2     UInt16    resourceID          // Resource ID                                                      
     * 2   2     UInt16    resourceNameOffset  // Offset from beginning of resource name list to resource name     
     * 4   1     UInt8     resourceAttributes  // Resource attributes                                              
     * 5   1*3   UInt8[3]  resourceDataOffset  // Offset from beginning of resource data to data for this resource.
     * 8   4     UInt32    reserved1           // Reserved for handle to resource.                                 
     */
    
    public static final int STRUCTSIZE = 12;
    
    private final byte[] resourceID = new byte[2];
    private final byte[] resourceNameOffset = new byte[2];
    private final byte[] resourceAttributes = new byte[1];
    private final byte[] resourceDataOffset = new byte[1*3];
    private final byte[] reserved1 = new byte[4];
    
    public ReferenceListEntry(byte[] data, int offset) {
	System.arraycopy(data, offset+0, resourceID, 0, 2);
	System.arraycopy(data, offset+2, resourceNameOffset, 0, 2);
	System.arraycopy(data, offset+4, resourceAttributes, 0, 1);
	System.arraycopy(data, offset+5, resourceDataOffset, 0, 1*3);
	System.arraycopy(data, offset+8, reserved1, 0, 4);
    }
    
    public static int length() { return STRUCTSIZE; }
    
    /** // Resource ID */
    public short getResourceID() { return Util.readShortBE(resourceID); }
    /** // Offset from beginning of resource name list to resource name */
    public short getResourceNameOffset() { return Util.readShortBE(resourceNameOffset); }
    /** // Resource attributes */
    public byte getResourceAttributes() { return Util.readByteBE(resourceAttributes); }
    /** // Offset from beginning of resource data to data for this resource. */
    public byte[] getResourceDataOffset() { return Util.readByteArrayBE(resourceDataOffset); }
    /** // Reserved for handle to resource. */
    public int getReserved1() { return Util.readIntBE(reserved1); }
    
    public void printFields(PrintStream ps, String prefix) {
	ps.println(prefix + " resourceID: " + getResourceID());
	ps.println(prefix + " resourceNameOffset: " + getResourceNameOffset());
	ps.println(prefix + " resourceAttributes: " + getResourceAttributes());
	ps.println(prefix + " resourceDataOffset: " + getResourceDataOffset());
	ps.println(prefix + " reserved1: " + getReserved1());
    }
    
    public void print(PrintStream ps, String prefix) {
	ps.println(prefix + "ReferenceListEntry:");
	printFields(ps, prefix);
    }
    
    public byte[] getBytes() {
	byte[] result = new byte[length()];
	int offset = 0;
	System.arraycopy(this.resourceID, 0, result, offset, this.resourceID.length); offset += this.resourceID.length;
	System.arraycopy(this.resourceNameOffset, 0, result, offset, this.resourceNameOffset.length); offset += this.resourceNameOffset.length;
	System.arraycopy(this.resourceAttributes, 0, result, offset, this.resourceAttributes.length); offset += this.resourceAttributes.length;
	System.arraycopy(this.resourceDataOffset, 0, result, offset, this.resourceDataOffset.length); offset += this.resourceDataOffset.length;
	System.arraycopy(this.reserved1, 0, result, offset, this.reserved1.length); offset += this.reserved1.length;
	return result;
    }

    public int size() {
        return length();
    }
}
