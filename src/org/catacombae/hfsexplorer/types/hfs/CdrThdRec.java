package org.catacombae.hfsexplorer.types.hfs;

import java.io.PrintStream;
import org.catacombae.hfsexplorer.Util;

/** This class was generated by CStructToJavaClass. */
public class CdrThdRec {
    /*
     * struct CdrThdRec
     * size: 46 bytes
     * description: 
     * 
     * BP  Size  Type       Identifier  Description                           
     * -----------------------------------------------------------------------
     * 0   1     SInt8      cdrType     record type (SignedByte)              
     * 1   1     SInt8      cdrResrv2   reserved (SignedByte)                 
     * 2   4*2   SInt32[2]  thdResrv    reserved (ARRAY[1..2] OF LongInt)     
     * 10  4     SInt32     thdParID    parent ID for this directory (LongInt)
     * 14  1*32  Char[32]   thdCName    name of this directory (Str31)        
     */
    
    public static final int STRUCTSIZE = 46;
    
    private final byte[] cdrType = new byte[1];
    private final byte[] cdrResrv2 = new byte[1];
    private final byte[] thdResrv = new byte[4*2];
    private final byte[] thdParID = new byte[4];
    private final byte[] thdCName = new byte[1*32];
    
    public CdrThdRec(byte[] data, int offset) {
	System.arraycopy(data, offset+0, cdrType, 0, 1);
	System.arraycopy(data, offset+1, cdrResrv2, 0, 1);
	System.arraycopy(data, offset+2, thdResrv, 0, 4*2);
	System.arraycopy(data, offset+10, thdParID, 0, 4);
	System.arraycopy(data, offset+14, thdCName, 0, 1*32);
    }
    
    public static int length() { return STRUCTSIZE; }
    
    /** record type (SignedByte) */
    public byte getCdrType() { return Util.readByteBE(cdrType); }
    /** reserved (SignedByte) */
    public byte getCdrResrv2() { return Util.readByteBE(cdrResrv2); }
    /** reserved (ARRAY[1..2] OF LongInt) */
    public int[] getThdResrv() { return Util.readIntArrayBE(thdResrv); }
    /** parent ID for this directory (LongInt) */
    public int getThdParID() { return Util.readIntBE(thdParID); }
    /** name of this directory (Str31) */
    public byte[] getThdCName() { return Util.readByteArrayBE(thdCName); }
    
    public void printFields(PrintStream ps, String prefix) {
	ps.println(prefix + " cdrType: " + getCdrType());
	ps.println(prefix + " cdrResrv2: " + getCdrResrv2());
	ps.println(prefix + " thdResrv: " + getThdResrv());
	ps.println(prefix + " thdParID: " + getThdParID());
	ps.println(prefix + " thdCName: " + getThdCName());
    }
    
    public void print(PrintStream ps, String prefix) {
	ps.println(prefix + "CdrThdRec:");
	printFields(ps, prefix);
    }
    
    public byte[] getBytes() {
	byte[] result = new byte[STRUCTSIZE];
	int offset = 0;
	System.arraycopy(cdrType, 0, result, offset, cdrType.length); offset += cdrType.length;
	System.arraycopy(cdrResrv2, 0, result, offset, cdrResrv2.length); offset += cdrResrv2.length;
	System.arraycopy(thdResrv, 0, result, offset, thdResrv.length); offset += thdResrv.length;
	System.arraycopy(thdParID, 0, result, offset, thdParID.length); offset += thdParID.length;
	System.arraycopy(thdCName, 0, result, offset, thdCName.length); offset += thdCName.length;
	return result;
    }
}
