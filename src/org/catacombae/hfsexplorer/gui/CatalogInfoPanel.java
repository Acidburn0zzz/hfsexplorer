/*
 * CatalogInfoPanel.java
 *
 * Created on den 20 mars 2007, 19:28
 */

package org.catacombae.hfsexplorer.gui;
import static org.catacombae.hfsexplorer.FileSystemBrowserWindow.NoLeafMutableTreeNode;
import org.catacombae.hfsexplorer.*;
import org.catacombae.hfsexplorer.types.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.tree.*;

/**
 *
 * @author  Erik
 */
public class CatalogInfoPanel extends javax.swing.JPanel {
    
    private static class BTNodeStorage {
	private BTNode node;
	private String text;
	public BTNodeStorage(BTNode node, String text) {
	    this.node = node;
	    this.text = text;
	}
	public BTNode getNode() { return node; }
	public String toString() { return text; }
    }
    private static class BTLeafStorage {
	private HFSPlusCatalogLeafRecord rec;
	private String text;
	public BTLeafStorage(HFSPlusCatalogLeafRecord rec, String text) {
	    this.rec = rec;
	    this.text = text;
	}
	public HFSPlusCatalogLeafRecord getRecord() { return rec; }
	public String toString() { return text; }
    }
    
    /** Creates new form CatalogInfoPanel */
    public CatalogInfoPanel(final HFSFileSystemView fsView) {
        initComponents();
	
	JTree dirTree = catalogTree;
	// Populate the root
	/* 
	 * What we need is a method that gets us the children of the "current" node.
	 * A B-tree starts with a header node, 
	 */
	BTNode iNode = fsView.getCatalogNode(-1); // Get root index node.
	
	DefaultMutableTreeNode rootNode = new NoLeafMutableTreeNode(new BTNodeStorage(iNode, "Catalog root"));
	expandNode(rootNode, iNode, fsView);
	
	DefaultTreeModel model = new DefaultTreeModel(rootNode);
	dirTree.setModel(model);

	dirTree.addTreeWillExpandListener(new TreeWillExpandListener() {
		public void treeWillExpand(TreeExpansionEvent e) 
                    throws ExpandVetoException {
		    
		    TreePath tp = e.getPath();
		    Object obj = tp.getLastPathComponent();
		    if(obj instanceof DefaultMutableTreeNode) {
			DefaultMutableTreeNode dmtn = ((DefaultMutableTreeNode)obj);
			Object obj2 = dmtn.getUserObject();
			if(obj2 instanceof BTNodeStorage) {
			    BTNode node = ((BTNodeStorage)obj2).getNode();
			    expandNode(dmtn, node, fsView);
			}
			else
			    throw new RuntimeException("Wrong user object type in expandable node!");
		    }
		    else
			throw new RuntimeException("Wrong node type in tree!");		    
		}
		
		public void treeWillCollapse(TreeExpansionEvent e) {}
	    });

    }

    public void expandNode(DefaultMutableTreeNode dmtn, BTNode node, HFSFileSystemView fsView) {
	if(node instanceof HFSPlusCatalogIndexNode) {
	    BTIndexRecord[] recs = ((HFSPlusCatalogIndexNode)node).getIndexRecords();
	    for(BTIndexRecord rec : recs) {
		BTNode curNode = fsView.getCatalogNode(rec.getIndex());
		BTKey key = rec.getKey();
		if(key instanceof HFSPlusCatalogKey) {
		    HFSPlusCatalogKey trueKey = (HFSPlusCatalogKey)key;
		    dmtn.add(new NoLeafMutableTreeNode(new BTNodeStorage(curNode, trueKey.getParentID().toString() + ":" + trueKey.getNodeName().toString())));
		}
		else
		    throw new RuntimeException("Wrong key type in catalog tree");
	    }
	}
	else if(node instanceof HFSPlusCatalogLeafNode) {
	    HFSPlusCatalogLeafRecord[] recs = ((HFSPlusCatalogLeafNode)node).getLeafRecords();
	    for(HFSPlusCatalogLeafRecord rec : recs)
		dmtn.add(new DefaultMutableTreeNode(new BTLeafStorage(rec, rec.getKey().getParentID().toString() + ":" + rec.getKey().getNodeName().toString())));
	}
	else
	    throw new RuntimeException("Invalid node type in tree.");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        descriptionLabel = new javax.swing.JLabel();
        catalogTreeScroller = new javax.swing.JScrollPane();
        catalogTree = new javax.swing.JTree();

        descriptionLabel.setText("View of the catalog file's B-tree:");

        catalogTreeScroller.setViewportView(catalogTree);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(catalogTreeScroller, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                    .add(descriptionLabel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(descriptionLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(catalogTreeScroller, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTree catalogTree;
    private javax.swing.JScrollPane catalogTreeScroller;
    private javax.swing.JLabel descriptionLabel;
    // End of variables declaration//GEN-END:variables
    
}
